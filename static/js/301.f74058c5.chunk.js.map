{"version":3,"file":"static/js/301.f74058c5.chunk.js","mappings":"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","sources":["pages/Registration.js"],"sourcesContent":["// Importing the CSS file for styling the component\nimport \"../css/Registration.css\";\n\n// Importing necessary modules from React and other libraries\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\n\n// Defining the Registration component\nconst Registration = () => {\n  // useState hook to manage form data state\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n  });\n\n  // useState hook to manage form validation errors\n  const [errors, setErrors] = useState({});\n\n  // useState hook to manage success message\n  const [message, setMessage] = useState('');\n\n  // useState hook to manage error message\n  const [error, setError] = useState('');\n\n  // useNavigate hook to programmatically navigate to different routes\n  const navigate = useNavigate();\n\n  // Function to handle input changes and update form data state\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n  };\n\n  // Function to validate the form data\n  const validateForm = () => {\n    const newErrors = {};\n\n    // Check if name is provided\n    if (!formData.name) newErrors.name = 'Name is required';\n\n    // Check if email is provided and valid\n    if (!formData.email) {\n      newErrors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      newErrors.email = 'Invalid email address';\n    }\n\n    // Check if password is provided and meets length requirement\n    if (!formData.password) {\n      newErrors.password = 'Password is required';\n    } else if (formData.password.length < 8) {\n      newErrors.password = 'Password must be at least 8 characters';\n    }\n\n    // Check if passwords match\n    if (formData.password !== formData.confirmPassword) {\n      newErrors.confirmPassword = 'Passwords do not match';\n    }\n\n    // Update errors state\n    setErrors(newErrors);\n\n    // Return true if no errors, false otherwise\n    return Object.keys(newErrors).length === 0;\n  };\n\n  // Function to handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault(); // Prevent default form submission behavior\n\n    // Validate form data and stop if validation fails\n    if (!validateForm()) return;\n\n    try {\n      // Send POST request to register the user\n      const response = await axios.post('/api/auth/register', formData);\n\n      // Set success message and clear error message\n      setMessage(response.data.message);\n      setError('');\n\n      // Navigate to login page after successful registration\n      navigate('/login');\n    } catch (err) {\n      // Set error message if registration fails\n      setError(err.response?.data?.message || 'Something went wrong');\n    }\n  };\n\n  // Render the registration form\n  return (\n    <div className=\"registration-container\">\n      <h2>Register</h2>\n      {message && <div className=\"success-message\">{message}</div>}\n      {error && <div className=\"error-message\">{error}</div>}\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"name\">Name</label>\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={formData.name}\n            onChange={handleChange}\n            placeholder=\"Enter your name\"\n          />\n          {errors.name && <div className=\"error\">{errors.name}</div>}\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"email\">Email</label>\n          <input\n            type=\"email\"\n            name=\"email\"\n            value={formData.email}\n            onChange={handleChange}\n            placeholder=\"Enter your email\"\n          />\n          {errors.email && <div className=\"error\">{errors.email}</div>}\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            name=\"password\"\n            value={formData.password}\n            onChange={handleChange}\n            placeholder=\"Enter your password\"\n          />\n          {errors.password && <div className=\"error\">{errors.password}</div>}\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"confirmPassword\">Confirm Password</label>\n          <input\n            type=\"password\"\n            name=\"confirmPassword\"\n            value={formData.confirmPassword}\n            onChange={handleChange}\n            placeholder=\"Confirm your password\"\n          />\n          {errors.confirmPassword && (\n            <div className=\"error\">{errors.confirmPassword}</div>\n          )}\n        </div>\n        <button type=\"submit\">Register</button>\n      </form>\n      <div className=\"text-center mt-3\">\n        Already have an account? <a href=\"/login\">Login here</a>\n      </div>\n    </div>\n  );\n};\n\n// Exporting the Registration component as default\nexport default Registration;"],"names":["Registration","formData","setFormData","useState","name","email","password","confirmPassword","errors","setErrors","message","setMessage","error","setError","navigate","useNavigate","handleChange","e","value","target","_objectSpread","_jsxs","className","children","_jsx","onSubmit","async","preventDefault","validateForm","newErrors","test","length","Object","keys","response","axios","post","data","err","_err$response","_err$response$data","htmlFor","type","onChange","placeholder","href"],"sourceRoot":""}