{"version":3,"file":"static/js/671.55808a98.chunk.js","mappings":"qLASA,MAyGA,EAzGcA,KAEZ,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAUC,IAAeF,EAAAA,EAAAA,UAAS,KAClCG,EAAQC,IAAaJ,EAAAA,EAAAA,UAAS,CAAC,IAC/BK,EAASC,IAAcN,EAAAA,EAAAA,UAAS,KAChCO,EAAOC,IAAYR,EAAAA,EAAAA,UAAS,IAG7BS,GAAWC,EAAAA,EAAAA,MAuDjB,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,UACHR,IAAWS,EAAAA,EAAAA,KAAA,OAAKF,UAAU,kBAAiBC,SAAER,IAC7CE,IAASO,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gBAAeC,SAAEN,KAC1CI,EAAAA,EAAAA,MAAA,QAAMI,SAlCWC,UAInB,GAHAC,EAAEC,iBAxBiBC,MACnB,MAAMC,EAAY,CAAC,EAkBnB,OAfKtB,EAEO,eAAeuB,KAAKvB,KAC9BsB,EAAUtB,MAAQ,yBAFlBsB,EAAUtB,MAAQ,oBAMfG,IACHmB,EAAUnB,SAAW,wBAIvBG,EAAUgB,GAG+B,IAAlCE,OAAOC,KAAKH,GAAWI,MAAY,EAQrCL,GAEL,IAEE,MAAMM,QAAiBC,EAAAA,EAAMC,KAAK,kBAAmB,CACnD7B,QACAG,aAIFK,EAAWmB,EAASG,KAAKvB,SACzBG,EAAS,IAGTqB,aAAaC,QAAQ,QAASL,EAASG,KAAKG,OAG5CtB,EAAS,aACX,CAAE,MAAOuB,GAAM,IAADC,EAAAC,EAEZ1B,GAAqB,QAAZyB,EAAAD,EAAIP,gBAAQ,IAAAQ,GAAM,QAANC,EAAZD,EAAcL,YAAI,IAAAM,OAAN,EAAZA,EAAoB7B,UAAW,uBAC1C,GAS+BQ,SAAA,EAC3BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SAAOqB,QAAQ,QAAOtB,SAAC,WACvBC,EAAAA,EAAAA,KAAA,SACEsB,KAAK,QACLC,KAAK,QACLC,MAAOxC,EACPyC,SAAWtB,GAAMlB,EAASkB,EAAEuB,OAAOF,OACnCG,YAAY,qBAEbtC,EAAOL,QAASgB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,QAAOC,SAAEV,EAAOL,YAElDa,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SAAOqB,QAAQ,WAAUtB,SAAC,cAC1BC,EAAAA,EAAAA,KAAA,SACEsB,KAAK,WACLC,KAAK,WACLC,MAAOrC,EACPsC,SAAWtB,GAAMf,EAAYe,EAAEuB,OAAOF,OACtCG,YAAY,wBAEbtC,EAAOF,WAAYa,EAAAA,EAAAA,KAAA,OAAKF,UAAU,QAAOC,SAAEV,EAAOF,eAErDa,EAAAA,EAAAA,KAAA,UAAQsB,KAAK,SAAQvB,SAAC,cAExBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,CAAC,2BACTC,EAAAA,EAAAA,KAAA,KAAG4B,KAAK,gBAAe7B,SAAC,sBAEjDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,CAAC,0BACVC,EAAAA,EAAAA,KAAA,KAAG4B,KAAK,mBAAkB7B,SAAC,uBAE/C,C","sources":["pages/Login.js"],"sourcesContent":["// Importing the CSS file for styling the Login component\nimport \"../css/Login.css\";\n\n// Importing necessary modules from React and other libraries\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\n\n// Defining the Login component\nconst Login = () => {\n  // Defining state variables for email, password, errors, message, and error\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [errors, setErrors] = useState({});\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState('');\n\n  // Using the useNavigate hook to programmatically navigate to different routes\n  const navigate = useNavigate();\n\n  // Function to validate the form inputs\n  const validateForm = () => {\n    const newErrors = {};\n\n    // Checking if email is provided and valid\n    if (!email) {\n      newErrors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(email)) {\n      newErrors.email = 'Invalid email address';\n    }\n\n    // Checking if password is provided\n    if (!password) {\n      newErrors.password = 'Password is required';\n    }\n\n    // Setting the errors state with the new errors\n    setErrors(newErrors);\n\n    // Returning true if there are no errors, false otherwise\n    return Object.keys(newErrors).length === 0;\n  };\n\n  // Function to handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault(); // Preventing the default form submission behavior\n\n    // Validating the form and stopping if validation fails\n    if (!validateForm()) return;\n\n    try {\n      // Sending a POST request to the login API with email and password\n      const response = await axios.post('/api/auth/login', {\n        email,\n        password,\n      });\n\n      // Setting the success message and clearing any error messages\n      setMessage(response.data.message);\n      setError('');\n\n      // Saving the received token to localStorage\n      localStorage.setItem('token', response.data.token);\n\n      // Navigating to the dashboard after successful login\n      navigate('/dashboard');\n    } catch (err) {\n      // Setting the error message if the request fails\n      setError(err.response?.data?.message || 'Something went wrong');\n    }\n  };\n\n  // Returning the JSX to render the Login component\n  return (\n    <div className=\"login-container\">\n      <h2>Login</h2>\n      {message && <div className=\"success-message\">{message}</div>}\n      {error && <div className=\"error-message\">{error}</div>}\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"email\">Email</label>\n          <input\n            type=\"email\"\n            name=\"email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            placeholder=\"Enter your email\"\n          />\n          {errors.email && <div className=\"error\">{errors.email}</div>}\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            name=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            placeholder=\"Enter your password\"\n          />\n          {errors.password && <div className=\"error\">{errors.password}</div>}\n        </div>\n        <button type=\"submit\">Login</button>\n      </form>\n      <div className=\"text-center mt-3\">\n        Don't have an account? <a href=\"/registration\">Register here</a>\n      </div>\n      <div className=\"text-center mt-3\">\n        Forgot your password? <a href=\"/forgot-password\">Reset it here</a>\n      </div>\n    </div>\n  );\n};\n\n// Exporting the Login component as the default export\nexport default Login;"],"names":["Login","email","setEmail","useState","password","setPassword","errors","setErrors","message","setMessage","error","setError","navigate","useNavigate","_jsxs","className","children","_jsx","onSubmit","async","e","preventDefault","validateForm","newErrors","test","Object","keys","length","response","axios","post","data","localStorage","setItem","token","err","_err$response","_err$response$data","htmlFor","type","name","value","onChange","target","placeholder","href"],"sourceRoot":""}