{"version":3,"file":"static/js/951.87d5869d.chunk.js","mappings":"qLAaA,MA0GA,EA1GsBA,KAEpB,MAAOC,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,KAClCC,EAAiBC,IAAsBF,EAAAA,EAAAA,UAAS,KAChDG,EAAQC,IAAaJ,EAAAA,EAAAA,UAAS,CAAC,IAC/BK,EAASC,IAAcN,EAAAA,EAAAA,UAAS,KAChCO,EAAOC,IAAYR,EAAAA,EAAAA,UAAS,IAG7BS,GAAWC,EAAAA,EAAAA,OAGX,MAAEC,IAAUC,EAAAA,EAAAA,KAsDlB,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2BAA0BC,SAAA,EACvCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mBACHV,IAAWW,EAAAA,EAAAA,KAAA,OAAKF,UAAU,kBAAiBC,SAAEV,IAAe,IAC5DE,IAASS,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gBAAeC,SAAER,IAAa,KACvDM,EAAAA,EAAAA,MAAA,QAAMI,SAjCWC,UAInB,GAHAC,EAAEC,iBAxBiBC,MACnB,MAAMC,EAAY,CAAC,EAkBnB,OAfKxB,EAEMA,EAASyB,OAAS,IAC3BD,EAAUxB,SAAW,0CAFrBwB,EAAUxB,SAAW,uBAMnBA,IAAaG,IACfqB,EAAUrB,gBAAkB,0BAI9BG,EAAUkB,GAG+B,IAAlCE,OAAOC,KAAKH,GAAWC,MAAY,EAQrCF,GAEL,IAEE,MAAMK,QAAiBC,EAAAA,EAAMC,KAAK,2BAA4B,CAC5DjB,QACAb,aAIFQ,EAAWoB,EAASG,KAAKxB,SAGzBG,EAAS,IAGTC,EAAS,SACX,CAAE,MAAOqB,GAAM,IAADC,EAAAC,EAEZxB,GAAqB,QAAZuB,EAAAD,EAAIJ,gBAAQ,IAAAK,GAAM,QAANC,EAAZD,EAAcF,YAAI,IAAAG,OAAN,EAAZA,EAAoB3B,UAAW,uBAC1C,GAS+BU,SAAA,EAC3BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SAAOiB,QAAQ,WAAUlB,SAAC,kBAC1BC,EAAAA,EAAAA,KAAA,SACEkB,KAAK,WACLC,KAAK,WACLC,MAAOtC,EACPuC,SAAWlB,GAAMpB,EAAYoB,EAAEmB,OAAOF,OACtCG,YAAY,uBAEbpC,EAAOL,WAAYkB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,QAAOC,SAAEZ,EAAOL,WAAgB,QAErEe,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SAAOiB,QAAQ,kBAAiBlB,SAAC,sBACjCC,EAAAA,EAAAA,KAAA,SACEkB,KAAK,WACLC,KAAK,kBACLC,MAAOnC,EACPoC,SAAWlB,GAAMjB,EAAmBiB,EAAEmB,OAAOF,OAC7CG,YAAY,yBAEbpC,EAAOF,kBACNe,EAAAA,EAAAA,KAAA,OAAKF,UAAU,QAAOC,SAAEZ,EAAOF,sBAGnCe,EAAAA,EAAAA,KAAA,UAAQkB,KAAK,SAAQnB,SAAC,mBAAuB,QAE/CF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,CAAC,4BACRC,EAAAA,EAAAA,KAAA,KAAGwB,KAAK,SAAQzB,SAAC,eAAc,SAErD,C","sources":["pages/ResetPassword.js"],"sourcesContent":["// Importing necessary CSS file for styling\nimport \"../css/ResetPassword.css\";\n\n// Importing React and necessary hooks from 'react'\nimport React, { useState } from 'react';\n\n// Importing axios for making HTTP requests\nimport axios from 'axios';\n\n// Importing hooks from 'react-router-dom' for navigation and accessing URL parameters\nimport { useNavigate, useParams } from 'react-router-dom';\n\n// Defining the ResetPassword component\nconst ResetPassword = () => {\n  // State hooks for managing form inputs and messages\n  const [password, setPassword] = useState(''); // State for new password\n  const [confirmPassword, setConfirmPassword] = useState(''); // State for confirming new password\n  const [errors, setErrors] = useState({}); // State for form validation errors\n  const [message, setMessage] = useState(''); // State for success message\n  const [error, setError] = useState(''); // State for error message\n\n  // Hook for navigation\n  const navigate = useNavigate();\n\n  // Hook for accessing URL parameters\n  const { token } = useParams(); // Get the reset token from the URL\n\n  // Function to validate the form inputs\n  const validateForm = () => {\n    const newErrors = {};\n\n    // Check if password is provided and meets length requirement\n    if (!password) {\n      newErrors.password = 'Password is required';\n    } else if (password.length < 8) {\n      newErrors.password = 'Password must be at least 8 characters';\n    }\n\n    // Check if password and confirm password match\n    if (password !== confirmPassword) {\n      newErrors.confirmPassword = 'Passwords do not match';\n    }\n\n    // Update the errors state\n    setErrors(newErrors);\n\n    // Return true if no errors, false otherwise\n    return Object.keys(newErrors).length === 0;\n  };\n\n  // Function to handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault(); // Prevent default form submission\n\n    // Validate the form inputs\n    if (!validateForm()) return; // Stop if validation fails\n\n    try {\n      // Make a POST request to reset the password\n      const response = await axios.post('/api/auth/reset-password', {\n        token, // Include the reset token\n        password, // Include the new password\n      });\n\n      // Update the success message state\n      setMessage(response.data.message);\n\n      // Clear any error message\n      setError('');\n\n      // Redirect to login page after successful reset\n      navigate('/login');\n    } catch (err) {\n      // Update the error message state\n      setError(err.response?.data?.message || 'Something went wrong');\n    }\n  };\n\n  // JSX to render the reset password form\n  return (\n    <div className=\"reset-password-container\">\n      <h2>Reset Password</h2>\n      {message && <div className=\"success-message\">{message}</div>} {/* Display success message if present */}\n      {error && <div className=\"error-message\">{error}</div>} {/* Display error message if present */}\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"password\">New Password</label>\n          <input\n            type=\"password\"\n            name=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)} // Update password state on input change\n            placeholder=\"Enter new password\"\n          />\n          {errors.password && <div className=\"error\">{errors.password}</div>} {/* Display password error if present */}\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"confirmPassword\">Confirm Password</label>\n          <input\n            type=\"password\"\n            name=\"confirmPassword\"\n            value={confirmPassword}\n            onChange={(e) => setConfirmPassword(e.target.value)} // Update confirmPassword state on input change\n            placeholder=\"Confirm new password\"\n          />\n          {errors.confirmPassword && (\n            <div className=\"error\">{errors.confirmPassword}</div> /* Display confirmPassword error if present */\n          )}\n        </div>\n        <button type=\"submit\">Reset Password</button> {/* Submit button */}\n      </form>\n      <div className=\"text-center mt-3\">\n        Remember your password? <a href=\"/login\">Login here</a> {/* Link to login page */}\n      </div>\n    </div>\n  );\n};\n\n// Exporting the ResetPassword component as default\nexport default ResetPassword;"],"names":["ResetPassword","password","setPassword","useState","confirmPassword","setConfirmPassword","errors","setErrors","message","setMessage","error","setError","navigate","useNavigate","token","useParams","_jsxs","className","children","_jsx","onSubmit","async","e","preventDefault","validateForm","newErrors","length","Object","keys","response","axios","post","data","err","_err$response","_err$response$data","htmlFor","type","name","value","onChange","target","placeholder","href"],"sourceRoot":""}